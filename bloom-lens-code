// Flower Drop Script (no tween version)
// @input SceneObject flower1
// @input SceneObject flower2
// @input SceneObject flower3
// @input SceneObject flower4
// @input Component.Text successText
// @input Component.Text failText
// @input Component.Image retryButton
// @input Component.Text tapInstructionText
// @input Component.Image endingScreen
// @input Component.AudioComponent successSound
// @input Component.AudioComponent failureSound  
// @input Component.AudioComponent celebrationMusic

var flowerObjects = [script.flower1, script.flower2, script.flower3, script.flower4];
var currentFlowerObj = null;
var isDropping = false;
var stopped = false;
var gameOver = false;
var failed = false; // Track if the game failed (to show retry option)
var celebrating = false; // Track if we're in celebration mode
var gameStarted = false; // Track if the game has started

// Game progression
var currentFlower = 1; // Current flower number (1-4)
var totalFlowers = 4; // Total number of flowers
var baseSwingSpeed = 0.2; // Base swing speed (increased from 0.15)
var speedIncrement = 0.05; // Speed increase per flower

// Movement settings
var dropSpeed = 10;
var groundY = -200;
var vaseRimY = -100; // Height where failed flowers stop (higher than groundY)

// Pendulum settings
var pivotY = -1500; // Y position of the pivot point (much further down, ~2.7x lower than -150)
var armLength = 1480; // Distance from pivot to flower center (increased to compensate for much lower pivot)
var maxAngle = 5 // Maximum swing angle in degrees (reduced from 15 to 5 for very subtle motion)
var swingSpeed = baseSwingSpeed; // Will be updated based on current flower
var currentAngle = -maxAngle; // Start at left side
var angleDirection = 1; // 1 for clockwise, -1 for counter-clockwise

// Vase detection settings (middle 1/3 of screen)
var vaseLeftBound = -40; // Approximate left edge of vase (reduced from -50)
var vaseRightBound = 40; // Approximate right edge of vase (reduced from 50)

// Celebration dance settings
var celebrationFlowers = []; // Flowers that are dancing
var danceTime = 0; // Time counter for dance animation

// Set current flower object and hide others (except landed ones)
function setCurrentFlower() {
    currentFlowerObj = flowerObjects[currentFlower - 1];
    
    // Hide only the non-landed flowers
    for (var i = currentFlower; i < flowerObjects.length; i++) {
        if (flowerObjects[i]) {
            flowerObjects[i].enabled = false;
        }
    }
    
    // Show the current flower
    if (currentFlowerObj) {
        currentFlowerObj.enabled = true;
    }
    
    print("Switched to flower " + currentFlower);
}

// Initialize UI elements as hidden
function initializeUI() {
    if (script.successText) script.successText.enabled = false;
    if (script.failText) script.failText.enabled = false;
    if (script.retryButton) script.retryButton.enabled = false;
    
    // Initialize ending screen as hidden
    if (script.endingScreen) {
        var endingScreenParent = script.endingScreen.getSceneObject();
        endingScreenParent.enabled = false;
        print("DEBUG: Ending screen parent SceneObject initialized as hidden");
    }
    
    // Show tap instruction at the beginning
    if (script.tapInstructionText && !gameStarted) {
        script.tapInstructionText.text = "Tap!";
        script.tapInstructionText.enabled = true;
    }
}

// Update swing speed based on current flower
function updateSwingSpeed() {
    swingSpeed = baseSwingSpeed + (currentFlower - 1) * speedIncrement;
    print("Flower " + currentFlower + " - Speed: " + swingSpeed);
}

// Reset flower position and rotation
function resetFlowerPosition() {
    if (!currentFlowerObj) return;
    
    var pos = currentFlowerObj.getTransform().getLocalPosition();
    var angleRad = currentAngle * (Math.PI / 180);
    pos.x = Math.sin(angleRad) * armLength;
    pos.y = pivotY + Math.cos(angleRad) * armLength;
    currentFlowerObj.getTransform().setLocalPosition(pos);
    
    // Reset rotation
    var rotation = currentFlowerObj.getTransform().getLocalRotation();
    rotation.z = -angleRad;
    currentFlowerObj.getTransform().setLocalRotation(rotation);
}

// Reset game to initial state
function resetGame() {
    // Stop celebration music first - try multiple methods
    if (script.celebrationMusic) {
        try {
            // Try method 1: stop()
            script.celebrationMusic.stop();
            print("Music stopped with stop()");
        } catch (e1) {
            try {
                // Try method 2: pause()
                script.celebrationMusic.pause();
                print("Music stopped with pause()");
            } catch (e2) {
                try {
                    // Try method 3: set volume to 0
                    script.celebrationMusic.volume = 0;
                    print("Music muted with volume = 0");
                } catch (e3) {
                    print("Could not stop music - tried stop(), pause(), and volume methods");
                }
            }
        }
    }
    
    isDropping = false;
    stopped = false;
    gameOver = false;
    failed = false;
    celebrating = false;
    gameStarted = false; // Reset game started flag
    currentFlower = 1; // Reset to first flower
    currentAngle = -maxAngle;
    angleDirection = 1;
    celebrationFlowers = [];
    danceTime = 0;
    
    // Hide all flowers first
    for (var i = 0; i < flowerObjects.length; i++) {
        if (flowerObjects[i]) {
            flowerObjects[i].enabled = false;
        }
    }
    
    // Set first flower and update speed
    setCurrentFlower();
    updateSwingSpeed();
    
    // Reset flower position
    resetFlowerPosition();
    
    // Hide UI elements (this will show tap instruction)
    initializeUI();
    print("Game reset completed - back to flower 1");
}

// Advance to next flower
function nextFlower() {
    currentFlower++;
    isDropping = false;
    stopped = false;
    gameOver = false;
    failed = false;
    currentAngle = -maxAngle;
    angleDirection = 1;
    
    // Switch to next flower and update speed
    setCurrentFlower();
    updateSwingSpeed();
    
    // Reset flower position
    resetFlowerPosition();
    
    print("Starting flower " + currentFlower + " of " + totalFlowers);
}

// Start celebration dance
function startCelebration() {
    celebrating = true;
    danceTime = 0;
    
    // Start celebration music
    if (script.celebrationMusic) {
        script.celebrationMusic.play(1); // Play once (set to -1 for loop if you want it to repeat)
        print("Celebration music started!");
    }
    
    // Make all flowers visible for the dance
    celebrationFlowers = [];
    for (var i = 0; i < flowerObjects.length; i++) {
        if (flowerObjects[i]) {
            flowerObjects[i].enabled = true;
            celebrationFlowers.push({
                flower: flowerObjects[i],
                angle: i * 90, // Start at different angles
                radius: 80,
                speed: 2 + i * 0.5 // Different speeds for each flower
            });
        }
    }
    
    print("ðŸŽ‰ Starting celebration dance!");
}

// Update celebration dance
function updateCelebration() {
    if (!celebrating) return;
    
    danceTime += 0.05; // Increment dance time
    
    // Check if ending screen was closed and show replay button
    if (script.endingScreen && script.retryButton) {
        var endingScreenParent = script.endingScreen.getSceneObject();
        if (!endingScreenParent.enabled && !script.retryButton.enabled) {
            // Ending screen is closed but replay button not yet shown
            script.retryButton.enabled = true;
            print("Ending screen closed - replay button now available!");
        }
    }
    
    for (var i = 0; i < celebrationFlowers.length; i++) {
        var flowerData = celebrationFlowers[i];
        var flower = flowerData.flower;
        
        // Calculate dancing position in a circle
        var angle = flowerData.angle + danceTime * flowerData.speed;
        var x = Math.sin(angle) * flowerData.radius;
        var y = Math.cos(angle) * flowerData.radius + 50; // Center around y=50
        
        // Set position
        var pos = flower.getTransform().getLocalPosition();
        pos.x = x;
        pos.y = y;
        flower.getTransform().setLocalPosition(pos);
        
        // Keep flowers upright (no rotation during dance)
        var rotation = flower.getTransform().getLocalRotation();
        rotation.z = 0; // Keep upright
        flower.getTransform().setLocalRotation(rotation);
    }
}

// Check if flower landed in vase
function checkLanding(flowerX) {
    return flowerX >= vaseLeftBound && flowerX <= vaseRightBound;
}

// Show success feedback
function showSuccess() {
    // Play success sound
    if (script.successSound) {
        script.successSound.play(1);
        print("Success sound played!");
    }
    
    if (script.successText) {
        if (currentFlower < totalFlowers) {
            script.successText.text = "Yayy~";
        } else {
            script.successText.text = "All Done!ðŸª»âœ¨";
        }
        script.successText.enabled = true;
    }
    print("ðŸŒ¸ Success! Flower " + currentFlower + " landed in vase!");
    
    // If not the last flower, advance after 2 seconds
    if (currentFlower < totalFlowers) {
        var delayedEvent = script.createEvent("DelayedCallbackEvent");
        delayedEvent.bind(function() {
            // Hide success message
            if (script.successText) script.successText.enabled = false;
            // Advance to next flower
            nextFlower();
        });
        delayedEvent.reset(2.0); // 2 second delay
    } else {
        // All flowers completed - show ending screen after 2 seconds
        var endingEvent = script.createEvent("DelayedCallbackEvent");
        endingEvent.bind(function() {
            // Hide success message
            if (script.successText) script.successText.enabled = false;
            // Show ending screen using the working method
            if (script.endingScreen) {
                var endingScreenParent = script.endingScreen.getSceneObject();
                endingScreenParent.enabled = true;
                print("DEBUG: Ending screen shown successfully");
            }
            // Start celebration dance
            startCelebration();
        });
        endingEvent.reset(2.0);
    }
}

// Show failure feedback
function showFailure() {
    failed = true;
    
    // Play failure sound
    if (script.failureSound) {
        script.failureSound.play(1);
        print("Failure sound played!");
    }
    
    if (script.failText) {
        script.failText.text = "Oops :(";
        script.failText.enabled = true;
    }
    if (script.retryButton) {
        script.retryButton.enabled = true;
    }
    print("ðŸ’” Missed the vase! Tap anywhere to retry.");
}

function onUpdate(eventData) {
    // Handle celebration dance
    if (celebrating) {
        updateCelebration();
        return;
    }
    
    if (!currentFlowerObj) return;
    if (stopped || gameOver) return;
    var pos = currentFlowerObj.getTransform().getLocalPosition();

    if (!isDropping) {
        // Update pendulum angle
        currentAngle += angleDirection * swingSpeed;
        
        // Reverse direction when hitting the limits
        if (currentAngle >= maxAngle || currentAngle <= -maxAngle) {
            angleDirection *= -1;
        }
        
        // Convert angle to radians
        var angleRad = currentAngle * (Math.PI / 180);
        
        // Calculate position based on pendulum motion
        // Pivot is below the flower, so flower rotates around lower point
        // x = sin(angle) * armLength
        // y = pivotY + cos(angle) * armLength
        pos.x = Math.sin(angleRad) * armLength;
        pos.y = pivotY + Math.cos(angleRad) * armLength;
        
        // Also rotate the flower object to match the pendulum angle
        var transform = currentFlowerObj.getTransform();
        var rotation = transform.getLocalRotation();
        rotation.z = -angleRad; // Negative to match the visual rotation
        transform.setLocalRotation(rotation);
    } else {
        // Drop vertically
        pos.y -= dropSpeed;

        // Check if flower is in vase area during drop
        var inVaseArea = checkLanding(pos.x);
        
        if (inVaseArea && pos.y <= groundY) {
            // Success: flower lands in vase (goes all the way down)
            pos.y = groundY;
            isDropping = false;
            stopped = true;
            gameOver = true;
            
            // Keep the flower in the vase (don't hide it)
            showSuccess();
        } else if (!inVaseArea && pos.y <= vaseRimY) {
            // Failure: flower hits vase rim/edge (stops higher)
            pos.y = vaseRimY;
            isDropping = false;
            stopped = true;
            gameOver = true;
            
            showFailure();
        }
    }
    
    currentFlowerObj.getTransform().setLocalPosition(pos);
}

// Initialize the game
setCurrentFlower(); // Set first flower
updateSwingSpeed(); // Set initial speed
initializeUI();

script.createEvent("UpdateEvent").bind(onUpdate);

script.createEvent("TapEvent").bind(function () {
    print("TAP DETECTED - checking game state");
    
    // Hide tap instruction on first tap
    if (!gameStarted && script.tapInstructionText) {
        script.tapInstructionText.enabled = false;
        gameStarted = true;
        print("Game started!");
    }
    
    if (celebrating) {
        print("In celebration mode");
        
        // Check if replay button is visible and restart game
        if (script.retryButton && script.retryButton.enabled) {
            print("REPLAY BUTTON IS VISIBLE AND ENABLED - RESTARTING GAME!");
            resetGame();
            return;
        } else {
            print("Replay button not ready - retryButton exists: " + (script.retryButton ? "yes" : "no") + ", enabled: " + (script.retryButton ? script.retryButton.enabled : "N/A"));
        }
        
        // During celebration, ignore other taps (ending screen has its own close button)
        print("Celebration mode - ignoring tap");
        return;
    }
    
    if (failed) {
        // If game failed, any tap will retry current flower
        print("Retrying flower " + currentFlower + "!");
        // Reset current flower (don't go back to flower 1)
        isDropping = false;
        stopped = false;
        gameOver = false;
        failed = false;
        currentAngle = -maxAngle;
        angleDirection = 1;
        
        // Reset flower position
        resetFlowerPosition();
        
        // Hide UI elements
        initializeUI();
        return;
    }
    
    if (gameOver) {
        print("Game over - ignoring tap");
        return; // Prevent tapping when game is over (success case)
    }
    
    print("Normal gameplay tap - dropping flower");
    isDropping = true;
});
